#include <iostream>
#include "attack.h"

using namespace std;

pid_t pid = 0;    // process ID (of either parent or child) from fork

int target_raw[2];   // unbuffered communication: attacker -> attack target
int attack_raw[2];   // unbuffered communication: attack target -> attacker

FILE* target_out = NULL; // buffered attack target input  stream
FILE* target_in  = NULL; // buffered attack target output stream

// AES SubBytes look-up table
unsigned char SubBytes[256] = 
{
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

// AES SubBytesInverse look-up table
unsigned char SubBytesInverse[256] = 
{
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

// round constant
// Only the first some of these constants are actually used â€“ up to rcon[10] for AES-128 (as 11 round keys are needed).
unsigned char rcon[11] = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

////////////////////////////////////////////////
// MixColumns Galois look-up tables

// multiply by 2
unsigned char galois_2[256] =
{
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
};

// multiply by 3
unsigned char galois_3[256] =
{
    0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 
    0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 
    0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 
    0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 
    0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 
    0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 
    0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 
    0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 
    0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 
    0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 
    0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 
    0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 
    0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 
    0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 
    0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 
    0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
};

// multiply by 9
unsigned char galois_9[256] =
{
    0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 
    0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 
    0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 
    0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 
    0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 
    0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 
    0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 
    0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 
    0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 
    0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 
    0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 
    0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 
    0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 
    0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 
    0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 
    0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46
};

// multiply by 11
unsigned char galois_11[256] =
{
    0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 
    0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 
    0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 
    0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 
    0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 
    0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 
    0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 
    0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 
    0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 
    0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e, 
    0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 
    0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 
    0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 
    0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 
    0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 
    0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3
};

// multiply by 13
unsigned char galois_13[256] =
{
    0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 
    0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 
    0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 
    0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 
    0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 
    0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 
    0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 
    0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 
    0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 
    0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41, 
    0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 
    0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 
    0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 
    0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 
    0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 
    0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97
};

// multiply by 14
unsigned char galois_14[256] =
{
    0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 
    0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 
    0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 
    0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 
    0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 
    0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 
    0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 
    0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 
    0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 
    0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb, 
    0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 
    0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 
    0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 
    0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 
    0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 
    0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d
};

void attack(char* argv2);
void cleanup(int s);

int main(int argc, char* argv[])
{

	// Ensure we clean-up correctly if Control-C (or similar) is signalled.
  	signal(SIGINT, &cleanup);

	// Create pipes to/from attack target; if it fails the reason is stored
	// in errno, but we'll just abort.
	if(pipe(target_raw) == -1)
		abort();
	  
	if(pipe(attack_raw) == -1)
		abort();

	switch(pid = fork()) 
	{ 
	    case -1: 
			// The fork failed; reason is stored in errno, but we'll just abort.
			abort();

	    case +0: 
	    {
			// (Re)connect standard input and output to pipes.
			close(STDOUT_FILENO);
			if(dup2(attack_raw[1], STDOUT_FILENO) == -1)
				abort();

			close(STDIN_FILENO);
			if(dup2(target_raw[0], STDIN_FILENO) == -1)
				abort();

			// Produce a sub-process representing the attack target.
			execl(argv[1], argv[0], NULL);

			// Break and clean-up once finished.
			break;
	    }

	    default:
	    {
			// Construct handles to attack target standard input and output.
			if((target_out = fdopen(attack_raw[0], "r")) == NULL) 
				abort();

			if((target_in = fdopen(target_raw[1], "w")) == NULL)
				abort();

			// Execute a function representing the attacker.
			attack(argv[2]);

			// Break and clean-up once finished.
			break;
	    }
	}

	// Clean up any resources we've hung on to.
	cleanup(SIGINT);

	return 0;
}

// interacts with the target *****.D
// send a message
// get the respective ciphertext
void interact(string fault, mpz_class &m, mpz_class &c, unsigned int &interaction_number)
{
    // interact with 61061.D
	gmp_fprintf(target_in, "%s\n%032ZX\n", fault.c_str(), m.get_mpz_t());
	fflush(target_in);
    
    // get ciphertext
    gmp_fscanf(target_out, "%ZX", c.get_mpz_t());
    
    interaction_number++;
}

// gets the i-th byte of a byte string
unsigned char get_byte(mpz_class &byte_string, int i)
{
    // (15 - i)*8  -> Big Endian
    //        i*8  -> Little Endian
    unsigned char byte = (unsigned char) ((mpz_class(byte_string >> (15-i)*8)).get_ui());
    return byte & 0xFF;
}

unsigned char ComputeFPrime(unsigned char* c, unsigned char* c_prime, vector<unsigned char> &r, vector<unsigned char> &k)
{
    unsigned char A = SubBytesInverse[
                        galois_9[SubBytesInverse[c[12]^k[12]] ^ r[12]] ^
                       galois_14[SubBytesInverse[c[9] ^k[9] ] ^ r[13]] ^
                       galois_11[SubBytesInverse[c[6] ^k[6] ] ^ r[14]] ^
                       galois_13[SubBytesInverse[c[3] ^k[3] ] ^ r[15]] ];
    unsigned char B = SubBytesInverse[
                        galois_9[SubBytesInverse[c_prime[12]^k[12]] ^ r[12]] ^
                       galois_14[SubBytesInverse[c_prime[9] ^k[9] ] ^ r[13]] ^
                       galois_11[SubBytesInverse[c_prime[6] ^k[6] ] ^ r[14]] ^
                       galois_13[SubBytesInverse[c_prime[3] ^k[3] ] ^ r[15]] ];
    return (A ^ B);
}

unsigned char ComputeFPrime2(unsigned char* c, unsigned char* c_prime, vector<unsigned char> &r, vector<unsigned char> &k)
{
    unsigned char A = SubBytesInverse[
                        galois_9[SubBytesInverse[c[7] ^k[7] ] ^ r[3]] ^
                       galois_14[SubBytesInverse[c[0] ^k[0] ] ^ r[0]] ^
                       galois_11[SubBytesInverse[c[13]^k[13]] ^ r[1]] ^
                       galois_13[SubBytesInverse[c[10]^k[10]] ^ r[2]] ];
    unsigned char B = SubBytesInverse[
                        galois_9[SubBytesInverse[c_prime[7] ^k[7] ] ^ r[3]] ^
                       galois_14[SubBytesInverse[c_prime[0] ^k[0] ] ^ r[0]] ^
                       galois_11[SubBytesInverse[c_prime[13]^k[13]] ^ r[1]] ^
                       galois_13[SubBytesInverse[c_prime[10]^k[10]] ^ r[2]] ];
    return (A ^ B);
}

unsigned char ComputeFPrime1(unsigned char* c, unsigned char* c_prime, vector<unsigned char> &r, vector<unsigned char> &k)
{
    unsigned char A = SubBytesInverse[
                        galois_9[SubBytesInverse[c[5] ^k[5] ] ^  r[9]] ^
                       galois_14[SubBytesInverse[c[2] ^k[2] ] ^ r[10]] ^
                       galois_11[SubBytesInverse[c[15]^k[15]] ^ r[11]] ^
                       galois_13[SubBytesInverse[c[8] ^k[8] ] ^  r[8]] ];
    unsigned char B = SubBytesInverse[
                        galois_9[SubBytesInverse[c_prime[5] ^k[5] ] ^  r[9]] ^
                       galois_14[SubBytesInverse[c_prime[2] ^k[2] ] ^ r[10]] ^
                       galois_11[SubBytesInverse[c_prime[15]^k[15]] ^ r[11]] ^
                       galois_13[SubBytesInverse[c_prime[8] ^k[8] ] ^  r[8]] ];
    return (A ^ B);
}

unsigned char ComputeFPrime3(unsigned char* c, unsigned char* c_prime, vector<unsigned char> &r, vector<unsigned char> &k)
{
    unsigned char A = SubBytesInverse[
                        galois_9[SubBytesInverse[c[14]^k[14]] ^ r[6]] ^
                       galois_14[SubBytesInverse[c[11]^k[11]] ^ r[7]] ^
                       galois_11[SubBytesInverse[c[4] ^k[4] ] ^ r[4]] ^
                       galois_13[SubBytesInverse[c[1] ^k[1] ] ^ r[5]] ];    
    unsigned char B = SubBytesInverse[
                        galois_9[SubBytesInverse[c_prime[14]^k[14]] ^ r[6]] ^
                       galois_14[SubBytesInverse[c_prime[11]^k[11]] ^ r[7]] ^
                       galois_11[SubBytesInverse[c_prime[4] ^k[4] ] ^ r[4]] ^
                       galois_13[SubBytesInverse[c_prime[1] ^k[1] ] ^ r[5]] ];
    return (A ^ B);
}

void KeyInv(unsigned char* r, const unsigned char* k, int round) 
{
    unsigned char round_char = rcon[round];

    r[15] = k[15] ^ k[11];
    r[14] = k[14] ^ k[10];
    r[13] = k[13] ^ k[9];
    r[12] = k[12] ^ k[8];
    
    r[11] = k[11] ^ k[7];
    r[10] = k[10] ^ k[6];
    r[9]  =  k[9] ^ k[5];
    r[8]  =  k[8] ^ k[4];
    
    r[7]  =  k[7] ^ k[3];
    r[6]  =  k[6] ^ k[2];
    r[5]  =  k[5] ^ k[1];
    r[4]  =  k[4] ^ k[0];
    
    r[3]  = SubBytes[r[12]] ^ k[3];
    r[2]  = SubBytes[r[15]] ^ k[2];
    r[1]  = SubBytes[r[14]] ^ k[1];
    r[0]  = SubBytes[r[13]] ^ k[0] ^ round_char;    
}

void equations(mpz_class &c, mpz_class &c_prime, vector<unsigned char> &k, vector< vector <unsigned char> > &k_1, 
                vector< vector <unsigned char> > &k_2, vector< vector <unsigned char> > &k_3, int i_0, int i_1, int i_2, int i_3)
{
    for (int i = 0; i < 256; i++)
    {
        unsigned char k_i_0 = i;
        
        unsigned char delta = (SubBytesInverse[get_byte(c, i_0)^k_i_0] ^ SubBytesInverse[get_byte(c_prime, i_0)^k_i_0]);
        
        vector <unsigned char> k_i_1_vect, k_i_2_vect, k_i_3_vect;
        
        for (int j = 0; j < 256; j++)
        {
            unsigned char k_i_1 = j;
            if ( delta == (SubBytesInverse[get_byte(c, i_1)^k_i_1] ^ SubBytesInverse[get_byte(c_prime, i_1)^k_i_1]) )
                k_i_1_vect.push_back(k_i_1);
        }
        
        if (k_i_1_vect.empty())
            continue;
        
        for (int j = 0; j < 256; j++)
        {
            unsigned char k_i_2 = j;
            if ( galois_2[delta] == (SubBytesInverse[get_byte(c, i_2)^k_i_2] ^ SubBytesInverse[get_byte(c_prime, i_2)^k_i_2]) )
                k_i_2_vect.push_back(k_i_2);
        }
        
        if (k_i_2_vect.empty())
            continue;
        
        for (int j = 0; j < 256; j++)
        {
            unsigned char k_i_3 = j;
            if ( galois_3[delta] == (SubBytesInverse[get_byte(c, i_3)^k_i_3] ^ SubBytesInverse[get_byte(c_prime, i_3)^k_i_3]) )
                k_i_3_vect.push_back(k_i_3);
        }
        
        if (k_i_3_vect.empty())
            continue;
        
        //cout << "End of equations\n";
        k.push_back(k_i_0);
        k_1.push_back(k_i_1_vect);
        k_2.push_back(k_i_2_vect);
        k_3.push_back(k_i_3_vect);
    }
}


void attack(char* argv2)
{
    // count the number of interactions with the target
    unsigned int interaction_number = 0;
    
    // declare variables for communication with the target
    mpz_class m, c, c_prime;
    // produce a random message
    gmp_randclass randomness(gmp_randinit_default);
    // compute a random message
    m = randomness.get_z_bits(128);
    
    // encrypt message without fault;
    interact("", m, c, interaction_number);
    // encrypt message with fault
    interact("8,1,0,0,0", m, c_prime, interaction_number);
    
    cout << "c       = " << hex << c << "\n";
    cout << "c_prime = " << hex << c_prime << "\n";
    
            vector <unsigned char>   k_10,  k_1,  k_8, k_3;
    vector< vector <unsigned char> > k_13,  k_0,  k_7;
    vector< vector <unsigned char> >  k_4, k_11, k_14;
    vector< vector <unsigned char> > k_15,  k_2,  k_5;
    vector< vector <unsigned char> >  k_6,  k_9, k_12;
    
    equations(c, c_prime, k_10, k_13,  k_0,  k_7, 10, 13,  0,  7);
    equations(c, c_prime,  k_1,  k_4, k_11, k_14,  1,  4, 11, 14);
    equations(c, c_prime,  k_8, k_15,  k_2,  k_5,  8, 15,  2,  5);
    equations(c, c_prime,  k_3,  k_6,  k_9, k_12,  3,  6,  9, 12);
    
    vector< vector <unsigned char> > k_hypotheses;
    
    //holder for the byte array
    unsigned char m_char[16] = {0}, c_char[16] = {0}, c_prime_char[16] = {0};
    
    // convert m_min from mpz_class to a byte array
    // have the behaviour of I2OSP
    mpz_export(m_char, NULL, 1, 1, 0, 0, m.get_mpz_t());
    mpz_export(c_char, NULL, 1, 1, 0, 0, c.get_mpz_t());
    mpz_export(c_prime_char, NULL, 1, 1, 0, 0, c_prime.get_mpz_t());
    
    #pragma omp parallel for
    for (int i_10 = 0 ; i_10 < k_10.size(); i_10++ )
    {
        vector<unsigned char> key(16);
        for (unsigned char byte_13 : k_13[i_10])
            for (unsigned char byte_0 : k_0[i_10])
                for (unsigned char byte_7 : k_7[i_10])
                    
                    for (int i_1 = 0 ; i_1 < k_1.size(); i_1++ )
                        for (unsigned char byte_4 : k_4[i_1])
                            for (unsigned char byte_11 : k_11[i_1])
                                for (unsigned char byte_14 : k_14[i_1])
                                    
                                    for (int i_8 = 0; i_8 < k_8.size(); i_8++ )
                                        for (unsigned char byte_15 : k_15[i_8])
                                            for (unsigned char byte_2 : k_2[i_8])
                                                for (unsigned char byte_5 : k_5[i_8])
                                                    
                                                    for (int i_3 = 0; i_3 < k_3.size(); i_3++ )
                                                        for (unsigned char byte_6 : k_6[i_3])
                                                            for (unsigned char byte_9 : k_9[i_3])
                                                                for (unsigned char byte_12 : k_12[i_3])
                                                                {
                                                                    key[0] = byte_0;
                                                                    key[1] = k_1[i_1];
                                                                    key[2] = byte_2;
                                                                    key[3] = k_3[i_3];
                                                                    key[4] = byte_4;
                                                                    key[5] = byte_5;
                                                                    key[6] = byte_6;
                                                                    key[7] = byte_7;
                                                                    key[8] = k_8[i_8];
                                                                    key[9] = byte_9;
                                                                    key[10] = k_10[i_10];
                                                                    key[11] = byte_11;
                                                                    key[12] = byte_12;
                                                                    key[13] = byte_13;
                                                                    key[14] = byte_14;
                                                                    key[15] = byte_15;
                                                                    
                                                                    vector<unsigned char> inv_key(16);
                                                                    
                                                                    KeyInv(inv_key.data(), key.data(), 10);
                                                                    
                                                                    //*
                                                                    unsigned char f_prime = ComputeFPrime(c_char, c_prime_char, inv_key, key);
                                                                    if (f_prime != ComputeFPrime1(c_char, c_prime_char, inv_key, key))
                                                                        continue;
                                                                    if (galois_3[f_prime] != ComputeFPrime3(c_char, c_prime_char, inv_key, key))
                                                                        continue;
                                                                    if (galois_2[f_prime] != ComputeFPrime2(c_char, c_prime_char, inv_key, key))
                                                                        continue;
                                                                    cout << '.' << flush;
                                                                    //*/
                                                                    
                                                                    for (int j = 10; j > 0; j--)
                                                                        KeyInv(key.data(), key.data(), j);

                                                                    unsigned char t[16];
        
                                                                    AES_KEY rk;
                                                                    AES_set_encrypt_key(key.data(), 128, &rk);
                                                                    AES_encrypt(m_char, t, &rk);  

                                                                    if(!memcmp(t, c_char, 16))
                                                                    {
                                                                        printf("\nAES.Enc( k, m ) == c\nk = ");
                                                                        for (int i = 0; i < 16; i++)
                                                                            printf("%02X", key[i]);
                                                                        
                                                                        cout << "\nNumber of interactions with the target: " << interaction_number << "\n\n";
                                                                        exit(0);
                                                                    }   
                                                                }
    }
}


void cleanup(int s) 
{
	// Close the   buffered communication handles.
	fclose(target_in);
	fclose(target_out);

	// Close the unbuffered communication handles.
	close(target_raw[0]); 
	close(target_raw[1]); 
	close(attack_raw[0]); 
	close(attack_raw[1]); 

	// Forcibly terminate the attack target process.
	if( pid > 0 )
		kill(pid, SIGKILL);

	// Forcibly terminate the attacker process.
	exit(1); 
}
