Q.1 The vendor of the attack target is concerned that news of this attack
    could scare off potential customers; they will make any alteration
    necessary (in software or hardware) to prevent the attack.  Explain the
    options they have, and which one you would recommend.
    
    1) Redundant code could be added - perform reduction regardless of the
    key bit and lead to overall constant execution time.
    2) Blinding - the data can be blinded before the ciphertext c is raised
    to the d-th power:
        1. pick a random number r
        2. compute q = r^e (mod N)
        3. compute C = cq (mod N)
        4. compute M = C^d (mod N)
        5. compute m = M/r (mod N)
    This works as:
       M/r = C^d/r = (cq)^d/r = (x^d)(q^d)/r = (x^d)r/r = x^d (mod N).
    Using this process makes it hard for the attacker to learn anything 
    about the private key d. [1]
    3) Software/Hardware - parallelise the algorithms (and create confusion),
    however, timing attacks are still possible.
    4) Chinese Remainder Theorem instead of Square-And-Multiply - inefficacious
    if the attacker can exploit intermediate values in the initial reduction
    of c mod p and c mod q; the final (combination) step of the CRT can also be
    exploited.
    
    I would personally recommend the second approach.
    
    [1]http://crypto.stackexchange.com/questions/5953/what-is-blinding-used-for-in-cryptography
    
Q.2 Let n denote the number of simulated clock cycles required to execute a
    Montgomery multiplication on the attack target.  Estimate the value of
    n (as accurately as you can) and explain how you did so.
     _____________________________________________________
    |       |  c^d  | Operations needed | Exectution time |
    |_______|_______|___________________|_________________|
    | c = 0 |  c^1  |     mul + sq      |     15 123      |
    |       |  c^10 |     mul + 2sq     |     18 892      |
    
    Both mul and sq are executed using Montgomery multiplication, and hence
    take roughly the same time. Therefore, it can be computed that a 
    Montgomery multiplication takes approximately 3770-80 (units of measurement).
    An overhead of roughly double that time can be noticed. However, this is the 
    time needed to convert the ciphertext to a Montgomery number before decryption
    commences, and reducing it to a normal integer afterwards. Both these algorithms
    involve a Montgomery multiplication, hence the overhead in question is just two
    more Montgomery multiplications. n = 3770
    //Therefore, once the whole execution time is given by the target, it can be divided
    //by 3770-80 to obtain the number of Montgomery multiplications. In my case this 
    //number is: n = 98.

    
Q.7 Numerous factors might produce noise within measurements of execution
    time: based on the given attack target and context, outline at least
    two examples.
    
    Memory (RAM) temperature, network latency and cache hit and miss can all
    affect execution time for decryption.

    (Cache attack https://eprint.iacr.org/2011/557.pdf )
    
    
Q.8 The level of noise, n, within measurements of execution time will
    influence the number of measurements, m, required for a successful
    attack.  Explain what the relationship between n and m is (i.e., how
    you expect m to grow as n grows).
    
    Assume an example case where a level of noise n requires m measurements. If another 
    case has a level of noise 2n, then 4m measurements will be required. In general, the
    number of measurements required increases as the square of the noise level. [1][2]
    
    However, in the general case, the number m is dependent on the choice of statistical
    model - one can simply average the execution times for all samples, or could use a more
    sophisticated approach (Monte Carlo bootstraping).
    
    [1] http://gauss.ececs.uc.edu/Courses/c653/lectures/SideC/intro.pdf
    [2] http://courses.csail.mit.edu/6.857/2006/handouts/TimingAttacks.pdf